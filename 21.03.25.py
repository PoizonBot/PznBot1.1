import random
import string
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

TOKEN = "7238350264:AAHSWoKaYWF8zLm3FXLjp5VmGHA1DuFtITs"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
ADMIN_CHAT_ID = -1002396820471 # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞

user_data = {}  # –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π





#–ü–†–û–ú–û–ö–û–î–´ –ó–î–ï–°–¨, –û–õ–ï–ì!!!!!!!!!!!
PROMO_CODES = ["MLFAST", "MLWELCOME"]






# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
def generate_order_number():
    letters = ''.join(random.choice(string.ascii_uppercase) for i in range(4))
    numbers = ''.join(random.choice(string.digits) for i in range(4))
    return letters + numbers

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="start_order")],
        [InlineKeyboardButton("üìú –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?", callback_data="how_to_order")],
        [InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data="cost_calculator")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ

    if query.data == "start_order":
        user_data[user_id] = {}  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text("‚úè –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª:", reply_markup=reply_markup)

    elif query.data == "back_to_start":
        keyboard = [
            [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="start_order")],
            [InlineKeyboardButton("üìú –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?", callback_data="how_to_order")],
            [InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data="cost_calculator")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text("üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=reply_markup)

    elif query.data == "how_to_order":
        keyboard = [[InlineKeyboardButton("‚úÖ –ü—Ä–æ—á–∏—Ç–∞–ª", callback_data="back_to_start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        how_to_order_text = """üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:https://telegra.ph/Kak-oformit-zakaz-cherez-POIZON-03-09"""
        await query.message.edit_text(how_to_order_text, reply_markup=reply_markup, disable_web_page_preview=True)

    elif query.data == "cost_calculator":
        user_data[user_id] = {"awaiting_cost_input": True}  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ (–≤ —é–∞–Ω—è—Ö):", reply_markup=reply_markup)

    elif query.data == "skip_screenshot":
        user_data[user_id]["screenshot"] = None
        await send_delivery_options(query)

    elif query.data.startswith("delivery_"):
        delivery_method = query.data.split("_")[1]
        delivery_text = {
            "auto": "üöõ –ê–≤—Ç–æ (20-30 –¥–Ω–µ–π)",
            "air": "‚úà –ê–≤–∏–∞ (12-20 –¥–Ω–µ–π)",
            "express": "‚ö° –≠–∫—Å–ø—Ä–µ—Å—Å (6-8 –¥–Ω–µ–π)",
        }.get(delivery_method, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        user_data[user_id]["delivery"] = delivery_text
        user_data[user_id]["awaiting_promo"] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞

        keyboard = [[InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_promo")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.edit_text("üéÅ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å):", reply_markup=reply_markup)

    elif query.data == "skip_promo":
        await finalize_order(query, context)
    
    elif query.data == "retry_promo":
        keyboard = [[InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_promo")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.edit_text("üéÅ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å):", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    user_input = update.message.text

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
    if user_id in user_data and user_data[user_id].get("awaiting_cost_input"):  
        if user_input.isdigit() and int(user_input) > 0:
            x = int(user_input)
            calculated_cost = ((x * 13 * 1.06) + 1500)
            final_cost = round(calculated_cost / 100) * 100  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ —Å–æ—Ç–µ–Ω –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É

            keyboard = [
                [InlineKeyboardButton("üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="cost_calculator")],
                [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ —É—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {final_cost}‚ÇΩ", reply_markup=reply_markup)

        else:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:", reply_markup=reply_markup)

        user_data.pop(user_id)  # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø—É—Ç–∞–ª –≤–≤–æ–¥ —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞
    elif user_id in user_data and "artikel" not in user_data[user_id]:
        user_data[user_id]["artikel"] = user_input
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:", reply_markup=reply_markup)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–∞
    elif user_id in user_data and "size" not in user_data[user_id]:
        user_data[user_id]["size"] = user_input
        keyboard = [[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_screenshot")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text("–ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –∂–µ–ª–∞–µ–º—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º:", reply_markup=reply_markup)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    elif user_id in user_data and user_data[user_id].get("awaiting_promo"):
        user_data[user_id]["awaiting_promo"] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è

        if user_input in PROMO_CODES:
            user_data[user_id]["promo"] = user_input
            await update.message.reply_text("–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!")

            await finalize_order(update, context, user_id)

        else:
            keyboard = [
                [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑", callback_data="retry_promo")],
                [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_promo")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            user_data[user_id]["awaiting_promo"] = True  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è

            await update.message.reply_text("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω", reply_markup=reply_markup)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤)
async def image_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id in user_data:
        photo = update.message.photo[-1].file_id
        user_data[user_id]["screenshot"] = photo

        await send_delivery_options(update)

# –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
async def send_delivery_options(update):
    keyboard = [
        [InlineKeyboardButton("üöõ –ê–≤—Ç–æ (20-30 –¥–Ω–µ–π)", callback_data="delivery_auto")],
        [InlineKeyboardButton("‚úà –ê–≤–∏–∞ (12-20 –¥–Ω–µ–π)", callback_data="delivery_air")],
        [InlineKeyboardButton("‚ö° –≠–∫—Å–ø—Ä–µ—Å—Å (6-8 –¥–Ω–µ–π)", callback_data="delivery_express")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if isinstance(update, Update):
        await update.message.reply_text("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=reply_markup)
    else:
        await update.message.edit_text("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=reply_markup)

#–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞

async def finalize_order(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    user = update.message.from_user if update.message else update.callback_query.from_user  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    order_number = generate_order_number()

    final_message = (
        f"üì¢ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{user.username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –Ω–∏–∫–Ω–µ–π–º–∞'}!\n\n"
        f"üìå –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}\n"
        f"üõí –ê—Ä—Ç–∏–∫—É–ª: {user_data[user_id].get('artikel', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìè –†–∞–∑–º–µ—Ä: {user_data[user_id].get('size', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {user_data[user_id].get('delivery', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')}\n"
        f"üéÅ –ü—Ä–æ–º–æ–∫–æ–¥: {user_data[user_id].get('promo', '–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω')}"
    )

    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=final_message, parse_mode="Markdown")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if user_data[user_id].get("screenshot"):
        await context.bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=user_data[user_id]["screenshot"])

    warning_message = (
        f"‚úÖ–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! üìå –í–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}\n"
        f"üë®‚Äçüíª –í —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.\n\n"
        f"!–í–Ω–∏–º–∞–Ω–∏–µ!\n"
        f"‚ö† –ï—Å–ª–∏ —É –≤–∞—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏–∫–Ω–µ–π–º, –≤—ã –¥–æ–ª–∂–Ω—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ —Å–≤–æ–µ–º –∑–∞–∫–∞–∑–µ –∏ —É—Ç–æ—á–Ω–∏—Ç—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏: @mandl_helper\n"
        f"–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if update.message:
        await update.message.reply_text(warning_message)
    elif update.callback_query:
        await update.callback_query.message.edit_text(warning_message)
    
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.add_handler(MessageHandler(filters.PHOTO, image_handler))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
